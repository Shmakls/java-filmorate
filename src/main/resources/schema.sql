DROP TABLE IF EXISTS REVIEWS, REVIEW_USEFULS, FILMS, FRIENDLIST, GENRES, GENRESLIST, LIKESLIST, MPA, USERS;

CREATE TABLE IF NOT EXISTS users
(
    user_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(50) NOT NULL,
    login    VARCHAR(50) NOT NULL,
    name     VARCHAR(50) NOT NULL,
    birthday DATE,
    UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS mpa
(
    rating_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name      VARCHAR(10) NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    film_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(50)  NOT NULL,
    description VARCHAR(200) NOT NULL,
    releaseDate DATE,
    duration    INT CHECK (duration > 0),
    rating_id   INT REFERENCES mpa (rating_id)
);

CREATE TABLE IF NOT EXISTS friendList
(
    user_id   INTEGER REFERENCES users (user_id),
    friend_id INTEGER REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS likesList
(
    film_id INTEGER REFERENCES films (film_id),
    user_id INTEGER REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS genresList
(
    film_id  INTEGER REFERENCES films (film_id),
    genre_id INTEGER REFERENCES genres (genre_id)
);

CREATE TABLE IF NOT EXISTS REVIEWS
(
    REVIEW_ID   INT  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    USER_ID     INT  NOT NULL,
    FILM_ID     INT  NOT NULL,
    CONTENT     TEXT NOT NULL,
    IS_POSITIVE BOOL NOT NULL,
    CONSTRAINT PK_REVIEWS PRIMARY KEY (REVIEW_ID),
    CONSTRAINT UNIQUE_USER_ID_FILM_ID_REVIEWS UNIQUE (USER_ID, FILM_ID)
);

CREATE TABLE IF NOT EXISTS REVIEW_USEFULS (
    REVIEW_ID INT NOT NULL,
    USER_ID   INT NOT NULL,
    USEFUL    INT NOT NULL CHECK (USEFUL IN (-1, 1)),
    CONSTRAINT PK_REVIEW_USEFULS PRIMARY KEY (REVIEW_ID, USER_ID)
);

ALTER TABLE REVIEWS
    ADD CONSTRAINT IF NOT EXISTS FK_REVIEWS_USER_ID FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID) ON DELETE CASCADE;

ALTER TABLE REVIEWS
    ADD CONSTRAINT IF NOT EXISTS FK_REVIEWS_FILM_ID FOREIGN KEY (FILM_ID)
        REFERENCES FILMS (FILM_ID) ON DELETE CASCADE;

ALTER TABLE REVIEW_USEFULS
    ADD CONSTRAINT IF NOT EXISTS FK_REVIEW_USEFULS_ID FOREIGN KEY (REVIEW_ID)
        REFERENCES REVIEWS (REVIEW_ID) ON DELETE CASCADE;

ALTER TABLE REVIEW_USEFULS
    ADD CONSTRAINT IF NOT EXISTS FK_REVIEW_USEFULS_USER_ID FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID) ON DELETE CASCADE;